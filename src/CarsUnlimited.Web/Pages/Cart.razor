@page "/cart"
@using CarsUnlimited.CartShared.Entities
@using CarsUnlimited.Web.Components

@using CarsUnlimited.Web.Data
@inject CartService CartService
@inject PurchaseService PurchaseService

@inject ProtectedSessionStorage storage

@inject IToastService toastService

<h3>Cart (@CartItemCount items)</h3>

@if (CartItemCount == 0)
{
    <p><em>There are no items in your cart</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col" class="col-md-7">Item</th>
                <th scope="col" class="col-md-1">Quantity</th>
                <th scope="col" class="col-md-1">Price</th>
                <th scope="col" class="col-md-1"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CartItems)
            {
                <CartItem CarId="@item.CarId" Quantity="@item.Count" />
            }
            <tr>
                <td colspan="5" class="text-right">
                    <button class="btn btn-block btn-danger" @onclick="@(e => DeleteCart(e))">Empty Cart</button>
                    <button class="btn btn-block btn-primary" @onclick="@(e => CompleteCart(e))">Checkout</button>
                </td>
            </tr>
        </tbody>
    </table>

}

@code {
    public int CartItemCount { get; set; } = 0;

    public List<CartShared.Entities.CartItem> CartItems { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var sessionId = await storage.GetAsync<string>("SessionId");

        CartItemCount = await CartService.GetItemsInCartCountAsync(sessionId.Value);

        CartItems = await CartService.GetItemsInCartAsync(sessionId.Value);

        StateHasChanged();
    }

    public async Task DeleteCart(MouseEventArgs e)
    {
        var sessionId = await storage.GetAsync<string>("SessionId");

        var reset = await CartService.DeleteCart(sessionId.Value);

        if (reset)
        {
            toastService.ShowSuccess("Cart emptied");
            StateHasChanged();
        }
    }

    public async Task CompleteCart(MouseEventArgs e)
    {
        var sessionId = await storage.GetAsync<string>("SessionId");

        var complete = await PurchaseService.CompleteCart(sessionId.Value);

        if(complete)
        {
            toastService.ShowSuccess("Purchase complete!");
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("Checkout failed");
            StateHasChanged();
        }
    }
}
