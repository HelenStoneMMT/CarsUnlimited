@using CarsUnlimited.InventoryShared.Entities
@using CarsUnlimited.Web.Data
@inject InventoryService InventoryService
@inject CartService CartService

@inject ProtectedSessionStorage storage
@inject IToastService toastService

@if (car == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <tr>
        <td scope="col" style="overflow:hidden; width:200px;">
            <img src="@car.CarPicture" width="200" />
        </td>
        <td scope="col" class="col-md-7">
            <strong>@car.CarManufacturer @car.CarModel</strong>

            <p>
                @car.CarInfo
            </p>
        </td>
        <td scope="col" class="col-md-1">
            @Quantity
        </td>
        <td scope="col" class="col-md-1">
            &pound; @string.Format("{0:N2}", (Quantity * car.CarPrice))
        </td>
        <td scope="col" class="col-md-1">
            <button class="btn btn-danger" @onclick="@(e => RemoveFromCart(e, car.Id))">Remove</button>
        </td>
    </tr>
}


@code {
    [Parameter]
    public string CarId { get; set; }

    [Parameter]
    public int Quantity { get; set; } = 0;

    public CarItem car { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        car = await InventoryService.GetInventoryItemByIdAsync(CarId);

        StateHasChanged();
    }

    public async Task RemoveFromCart(MouseEventArgs e, string id)
    {
        var sessionId = await storage.GetAsync<string>("SessionId");
        var removeTask = await CartService.DeleteFromCartByIdAsync(sessionId.Value, id);

        if(removeTask)
        {
            toastService.ShowInfo("Item removed from cart");
            StateHasChanged();
        } 
        else
        {
            toastService.ShowError("Couldn't remove item from cart");
            StateHasChanged();
        }
    }
}
